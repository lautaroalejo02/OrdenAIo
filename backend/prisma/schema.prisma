// Prisma schema for restaurant and WhatsApp bot management
// Comments in English for maintainability

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RestaurantConfig {
  id                  String   @id @default(cuid())
  isOpen              Boolean  @default(true)
  openingHours        Json     // {"monday": {"open": "08:00", "close": "22:00"}}
  menuItems           Json     // Complete menu structure with prices
  deliveryZones       Json     // Zones with pricing and delivery times
  preparationTimes    Json     // Preparation time per product category
  maxMessagesPerHour  Int      @default(10)
  escalationKeywords  String[]
  autoResponses       Json
  updatedAt           DateTime @updatedAt
  filterKeywords      String[]
  restaurantName      String   @default("")
  orderMethod         String   @default("")
  botTone             String   @default("")
  unrelatedMessage    String   @default("")
  bannedNumbers       String[]
  outOfHoursMessage   String?
  enableReorderOption Boolean  @default(true)
  maxReorderDays      Int      @default(30)
  welcomeBackMessage  String?
  firstTimeMessage    String?
}

model Conversation {
  id                String             @id @default(cuid())
  phoneNumber       String
  customerName      String?
  status            ConversationStatus @default(BOT_ACTIVE)
  escalationReason  String?
  priority          Priority           @default(LOW)
  humanAssigned     String?
  messageCount      Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastBotMessageAt  DateTime?

  messages          Message[]
  orders            Order[]
  orderDrafts       OrderDraft[]

  @@index([phoneNumber])
  @@index([status])
}

model Message {
  id               String      @id @default(cuid())
  conversationId   String
  conversation     Conversation @relation(fields: [conversationId], references: [id])
  sender           MessageSender
  content          String
  timestamp        DateTime    @default(now())
  wasFiltered      Boolean     @default(false)
  geminiResponse   Json?
  processingTimeMs Int?
  wasEscalated     Boolean     @default(false)

  @@index([conversationId])
}

model CustomerProfile {
  phoneNumber        String   @id
  name               String?
  favoriteItems      String[]
  usualAddress       String?
  preferredPayment   String?
  orderCount         Int      @default(0)
  totalSpent         Decimal  @default(0)
  lastOrderDate      DateTime?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  lastOrderId        String?
  lastOrder          Order?   @relation("LastOrder", fields: [lastOrderId], references: [id])
  preferredOrderTime String?
  averageOrderValue  Decimal  @default(0)
}

model Order {
  id               String        @id @default(cuid())
  conversationId   String
  conversation     Conversation  @relation(fields: [conversationId], references: [id])
  items            Json          // Order items with quantities and prices
  totalAmount      Decimal
  deliveryAddress  String
  status           OrderStatus   @default(PENDING)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  orderSource      OrderSource   @default(CHAT)
  isReorder        Boolean       @default(false)
  originalOrderId  String?
  originalOrder    Order?        @relation("ReorderRef", fields: [originalOrderId], references: [id])
  reorders         Order[]       @relation("ReorderRef")
  customerLastOrder CustomerProfile[] @relation("LastOrder")
}

model UserActivity {
  phoneNumber     String   @id
  messageCount    Int      @default(0)
  lastMessageAt   DateTime @default(now())
  lastResetAt     DateTime @default(now())
  isBlocked       Boolean  @default(false)
  warningCount    Int      @default(0)
}

model OrderDraft {
  id             String        @id @default(cuid())
  conversationId String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  itemName       String?
  itemId         String?
  quantity       Int?
  status         String        @default("IN_PROGRESS")
  extraData      Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum ConversationStatus {
  BOT_ACTIVE
  HUMAN_TAKEOVER
  WAITING_HUMAN
  BLOCKED
  COMPLETED
}

enum MessageSender {
  CUSTOMER
  BOT
  HUMAN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum OrderSource {
  CHAT
  WEB_MENU
  REORDER
  VOICE_NOTE
  SCHEDULED
} 